/**
 */
package metamodel.req.provider;

import java.util.ArrayList;
import java.util.Collection;

import metamodel.req.util.ReqAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ReqItemProviderAdapterFactory extends ReqAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ReqItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.req.Interface_req} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Interface_reqItemProvider interface_reqItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.req.Interface_req}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInterface_reqAdapter() {
		if (interface_reqItemProvider == null) {
			interface_reqItemProvider = new Interface_reqItemProvider(this);
		}

		return interface_reqItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.req.Functional_req} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Functional_reqItemProvider functional_reqItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.req.Functional_req}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctional_reqAdapter() {
		if (functional_reqItemProvider == null) {
			functional_reqItemProvider = new Functional_reqItemProvider(this);
		}

		return functional_reqItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.req.SRS} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SRSItemProvider srsItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.req.SRS}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSRSAdapter() {
		if (srsItemProvider == null) {
			srsItemProvider = new SRSItemProvider(this);
		}

		return srsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.req.Realize} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RealizeItemProvider realizeItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.req.Realize}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRealizeAdapter() {
		if (realizeItemProvider == null) {
			realizeItemProvider = new RealizeItemProvider(this);
		}

		return realizeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.req.Constrain} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstrainItemProvider constrainItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.req.Constrain}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstrainAdapter() {
		if (constrainItemProvider == null) {
			constrainItemProvider = new ConstrainItemProvider(this);
		}

		return constrainItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.req.Depend} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DependItemProvider dependItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.req.Depend}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDependAdapter() {
		if (dependItemProvider == null) {
			dependItemProvider = new DependItemProvider(this);
		}

		return dependItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.req.Composite} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositeItemProvider compositeItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.req.Composite}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositeAdapter() {
		if (compositeItemProvider == null) {
			compositeItemProvider = new CompositeItemProvider(this);
		}

		return compositeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.req.Interact} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InteractItemProvider interactItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.req.Interact}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInteractAdapter() {
		if (interactItemProvider == null) {
			interactItemProvider = new InteractItemProvider(this);
		}

		return interactItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.req.Operation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationItemProvider operationItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.req.Operation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationAdapter() {
		if (operationItemProvider == null) {
			operationItemProvider = new OperationItemProvider(this);
		}

		return operationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.req.Restriction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RestrictionItemProvider restrictionItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.req.Restriction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRestrictionAdapter() {
		if (restrictionItemProvider == null) {
			restrictionItemProvider = new RestrictionItemProvider(this);
		}

		return restrictionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.req.Event} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventItemProvider eventItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.req.Event}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventAdapter() {
		if (eventItemProvider == null) {
			eventItemProvider = new EventItemProvider(this);
		}

		return eventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.req.Input_output} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Input_outputItemProvider input_outputItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.req.Input_output}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInput_outputAdapter() {
		if (input_outputItemProvider == null) {
			input_outputItemProvider = new Input_outputItemProvider(this);
		}

		return input_outputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.req.Performance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PerformanceItemProvider performanceItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.req.Performance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPerformanceAdapter() {
		if (performanceItemProvider == null) {
			performanceItemProvider = new PerformanceItemProvider(this);
		}

		return performanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.req.Reliability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReliabilityItemProvider reliabilityItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.req.Reliability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReliabilityAdapter() {
		if (reliabilityItemProvider == null) {
			reliabilityItemProvider = new ReliabilityItemProvider(this);
		}

		return reliabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.req.Security} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SecurityItemProvider securityItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.req.Security}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSecurityAdapter() {
		if (securityItemProvider == null) {
			securityItemProvider = new SecurityItemProvider(this);
		}

		return securityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodel.req.Operation_event} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Operation_eventItemProvider operation_eventItemProvider;

	/**
	 * This creates an adapter for a {@link metamodel.req.Operation_event}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperation_eventAdapter() {
		if (operation_eventItemProvider == null) {
			operation_eventItemProvider = new Operation_eventItemProvider(this);
		}

		return operation_eventItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (interface_reqItemProvider != null)
			interface_reqItemProvider.dispose();
		if (functional_reqItemProvider != null)
			functional_reqItemProvider.dispose();
		if (srsItemProvider != null)
			srsItemProvider.dispose();
		if (realizeItemProvider != null)
			realizeItemProvider.dispose();
		if (constrainItemProvider != null)
			constrainItemProvider.dispose();
		if (dependItemProvider != null)
			dependItemProvider.dispose();
		if (compositeItemProvider != null)
			compositeItemProvider.dispose();
		if (interactItemProvider != null)
			interactItemProvider.dispose();
		if (operationItemProvider != null)
			operationItemProvider.dispose();
		if (restrictionItemProvider != null)
			restrictionItemProvider.dispose();
		if (eventItemProvider != null)
			eventItemProvider.dispose();
		if (input_outputItemProvider != null)
			input_outputItemProvider.dispose();
		if (performanceItemProvider != null)
			performanceItemProvider.dispose();
		if (reliabilityItemProvider != null)
			reliabilityItemProvider.dispose();
		if (securityItemProvider != null)
			securityItemProvider.dispose();
		if (operation_eventItemProvider != null)
			operation_eventItemProvider.dispose();
	}

}
