/*
 * generated by Xtext 2.25.0
 */
package org.xtext.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.ide.contentassist.antlr.internal.InternalReqTxtParser;
import org.xtext.services.ReqTxtGrammarAccess;

public class ReqTxtParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(ReqTxtGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, ReqTxtGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getConditionAccess().getAlternatives(), "rule__Condition__Alternatives");
			builder.put(grammarAccess.getKeywordsAccess().getAlternatives(), "rule__Keywords__Alternatives");
			builder.put(grammarAccess.getWHENAccess().getAlternatives(), "rule__WHEN__Alternatives");
			builder.put(grammarAccess.getWHEREAccess().getAlternatives(), "rule__WHERE__Alternatives");
			builder.put(grammarAccess.getIFAccess().getAlternatives(), "rule__IF__Alternatives");
			builder.put(grammarAccess.getWHILEAccess().getAlternatives(), "rule__WHILE__Alternatives");
			builder.put(grammarAccess.getReqDesAccess().getGroup(), "rule__ReqDes__Group__0");
			builder.put(grammarAccess.getConWhenAccess().getGroup(), "rule__ConWhen__Group__0");
			builder.put(grammarAccess.getConIfAccess().getGroup(), "rule__ConIf__Group__0");
			builder.put(grammarAccess.getConWhileAccess().getGroup(), "rule__ConWhile__Group__0");
			builder.put(grammarAccess.getConWhereAccess().getGroup(), "rule__ConWhere__Group__0");
			builder.put(grammarAccess.getResponseAccess().getGroup(), "rule__Response__Group__0");
			builder.put(grammarAccess.getModelAccess().getReqsAssignment(), "rule__Model__ReqsAssignment");
			builder.put(grammarAccess.getReqDesAccess().getNameAssignment_0(), "rule__ReqDes__NameAssignment_0");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private ReqTxtGrammarAccess grammarAccess;

	@Override
	protected InternalReqTxtParser createParser() {
		InternalReqTxtParser result = new InternalReqTxtParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ReqTxtGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ReqTxtGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
