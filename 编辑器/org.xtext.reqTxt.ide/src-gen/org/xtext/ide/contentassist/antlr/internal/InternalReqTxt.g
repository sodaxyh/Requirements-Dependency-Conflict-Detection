/*
 * generated by Xtext 2.25.0
 */
grammar InternalReqTxt;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.services.ReqTxtGrammarAccess;

}
@parser::members {
	private ReqTxtGrammarAccess grammarAccess;

	public void setGrammarAccess(ReqTxtGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getReqsAssignment()); }
		(rule__Model__ReqsAssignment)*
		{ after(grammarAccess.getModelAccess().getReqsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReqDes
entryRuleReqDes
:
{ before(grammarAccess.getReqDesRule()); }
	 ruleReqDes
{ after(grammarAccess.getReqDesRule()); } 
	 EOF 
;

// Rule ReqDes
ruleReqDes 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReqDesAccess().getGroup()); }
		(rule__ReqDes__Group__0)
		{ after(grammarAccess.getReqDesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCondition
entryRuleCondition
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionAccess().getAlternatives()); }
		(rule__Condition__Alternatives)*
		{ after(grammarAccess.getConditionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConWhen
entryRuleConWhen
:
{ before(grammarAccess.getConWhenRule()); }
	 ruleConWhen
{ after(grammarAccess.getConWhenRule()); } 
	 EOF 
;

// Rule ConWhen
ruleConWhen 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConWhenAccess().getGroup()); }
		(rule__ConWhen__Group__0)
		{ after(grammarAccess.getConWhenAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConIf
entryRuleConIf
:
{ before(grammarAccess.getConIfRule()); }
	 ruleConIf
{ after(grammarAccess.getConIfRule()); } 
	 EOF 
;

// Rule ConIf
ruleConIf 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConIfAccess().getGroup()); }
		(rule__ConIf__Group__0)
		{ after(grammarAccess.getConIfAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConWhile
entryRuleConWhile
:
{ before(grammarAccess.getConWhileRule()); }
	 ruleConWhile
{ after(grammarAccess.getConWhileRule()); } 
	 EOF 
;

// Rule ConWhile
ruleConWhile 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConWhileAccess().getGroup()); }
		(rule__ConWhile__Group__0)
		{ after(grammarAccess.getConWhileAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConWhere
entryRuleConWhere
:
{ before(grammarAccess.getConWhereRule()); }
	 ruleConWhere
{ after(grammarAccess.getConWhereRule()); } 
	 EOF 
;

// Rule ConWhere
ruleConWhere 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConWhereAccess().getGroup()); }
		(rule__ConWhere__Group__0)
		{ after(grammarAccess.getConWhereAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleResponse
entryRuleResponse
:
{ before(grammarAccess.getResponseRule()); }
	 ruleResponse
{ after(grammarAccess.getResponseRule()); } 
	 EOF 
;

// Rule Response
ruleResponse 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getResponseAccess().getGroup()); }
		(rule__Response__Group__0)
		{ after(grammarAccess.getResponseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePreTrigger
entryRulePreTrigger
:
{ before(grammarAccess.getPreTriggerRule()); }
	 rulePreTrigger
{ after(grammarAccess.getPreTriggerRule()); } 
	 EOF 
;

// Rule PreTrigger
rulePreTrigger 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPreTriggerAccess().getOTHERParserRuleCall()); }
		ruleOTHER
		{ after(grammarAccess.getPreTriggerAccess().getOTHERParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleState
entryRuleState
:
{ before(grammarAccess.getStateRule()); }
	 ruleState
{ after(grammarAccess.getStateRule()); } 
	 EOF 
;

// Rule State
ruleState 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStateAccess().getOTHERParserRuleCall()); }
		ruleOTHER
		{ after(grammarAccess.getStateAccess().getOTHERParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFeature
entryRuleFeature
:
{ before(grammarAccess.getFeatureRule()); }
	 ruleFeature
{ after(grammarAccess.getFeatureRule()); } 
	 EOF 
;

// Rule Feature
ruleFeature 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFeatureAccess().getOTHERParserRuleCall()); }
		ruleOTHER
		{ after(grammarAccess.getFeatureAccess().getOTHERParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSysName
entryRuleSysName
:
{ before(grammarAccess.getSysNameRule()); }
	 ruleSysName
{ after(grammarAccess.getSysNameRule()); } 
	 EOF 
;

// Rule SysName
ruleSysName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSysNameAccess().getOTHERParserRuleCall()); }
		ruleOTHER
		{ after(grammarAccess.getSysNameAccess().getOTHERParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSysRes
entryRuleSysRes
:
{ before(grammarAccess.getSysResRule()); }
	 ruleSysRes
{ after(grammarAccess.getSysResRule()); } 
	 EOF 
;

// Rule SysRes
ruleSysRes 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSysResAccess().getOTHERParserRuleCall()); }
		ruleOTHER
		{ after(grammarAccess.getSysResAccess().getOTHERParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWHEN
entryRuleWHEN
:
{ before(grammarAccess.getWHENRule()); }
	 ruleWHEN
{ after(grammarAccess.getWHENRule()); } 
	 EOF 
;

// Rule WHEN
ruleWHEN 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWHENAccess().getAlternatives()); }
		(rule__WHEN__Alternatives)
		{ after(grammarAccess.getWHENAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWHERE
entryRuleWHERE
:
{ before(grammarAccess.getWHERERule()); }
	 ruleWHERE
{ after(grammarAccess.getWHERERule()); } 
	 EOF 
;

// Rule WHERE
ruleWHERE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWHEREAccess().getAlternatives()); }
		(rule__WHERE__Alternatives)
		{ after(grammarAccess.getWHEREAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIF
entryRuleIF
:
{ before(grammarAccess.getIFRule()); }
	 ruleIF
{ after(grammarAccess.getIFRule()); } 
	 EOF 
;

// Rule IF
ruleIF 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIFAccess().getAlternatives()); }
		(rule__IF__Alternatives)
		{ after(grammarAccess.getIFAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWHILE
entryRuleWHILE
:
{ before(grammarAccess.getWHILERule()); }
	 ruleWHILE
{ after(grammarAccess.getWHILERule()); } 
	 EOF 
;

// Rule WHILE
ruleWHILE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWHILEAccess().getAlternatives()); }
		(rule__WHILE__Alternatives)
		{ after(grammarAccess.getWHILEAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOTHER
entryRuleOTHER
:
{ before(grammarAccess.getOTHERRule()); }
	 ruleOTHER
{ after(grammarAccess.getOTHERRule()); } 
	 EOF 
;

// Rule OTHER
ruleOTHER 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getOTHERAccess().getIDTerminalRuleCall()); }
			(RULE_ID)
			{ after(grammarAccess.getOTHERAccess().getIDTerminalRuleCall()); }
		)
		(
			{ before(grammarAccess.getOTHERAccess().getIDTerminalRuleCall()); }
			(RULE_ID)*
			{ after(grammarAccess.getOTHERAccess().getIDTerminalRuleCall()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getConWhenParserRuleCall_0()); }
		ruleConWhen
		{ after(grammarAccess.getConditionAccess().getConWhenParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getConWhileParserRuleCall_1()); }
		ruleConWhile
		{ after(grammarAccess.getConditionAccess().getConWhileParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getConWhereParserRuleCall_2()); }
		ruleConWhere
		{ after(grammarAccess.getConditionAccess().getConWhereParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getConIfParserRuleCall_3()); }
		ruleConIf
		{ after(grammarAccess.getConditionAccess().getConIfParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WHEN__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWHENAccess().getWhenKeyword_0()); }
		'When'
		{ after(grammarAccess.getWHENAccess().getWhenKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getWHENAccess().getWhenKeyword_1()); }
		'when'
		{ after(grammarAccess.getWHENAccess().getWhenKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WHERE__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWHEREAccess().getWhereKeyword_0()); }
		'Where'
		{ after(grammarAccess.getWHEREAccess().getWhereKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getWHEREAccess().getWhereKeyword_1()); }
		'where'
		{ after(grammarAccess.getWHEREAccess().getWhereKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IF__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIFAccess().getIfKeyword_0()); }
		'If'
		{ after(grammarAccess.getIFAccess().getIfKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getIFAccess().getIfKeyword_1()); }
		'if'
		{ after(grammarAccess.getIFAccess().getIfKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WHILE__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWHILEAccess().getWhileKeyword_0()); }
		'While'
		{ after(grammarAccess.getWHILEAccess().getWhileKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getWHILEAccess().getWhileKeyword_1()); }
		'while'
		{ after(grammarAccess.getWHILEAccess().getWhileKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReqDes__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReqDes__Group__0__Impl
	rule__ReqDes__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReqDes__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReqDesAccess().getNameAssignment_0()); }
	(rule__ReqDes__NameAssignment_0)
	{ after(grammarAccess.getReqDesAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReqDes__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReqDes__Group__1__Impl
	rule__ReqDes__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReqDes__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReqDesAccess().getResponseParserRuleCall_1()); }
	ruleResponse
	{ after(grammarAccess.getReqDesAccess().getResponseParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReqDes__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReqDes__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReqDes__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReqDesAccess().getFullStopKeyword_2()); }
	'.'
	{ after(grammarAccess.getReqDesAccess().getFullStopKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConWhen__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConWhen__Group__0__Impl
	rule__ConWhen__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConWhen__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConWhenAccess().getWHENParserRuleCall_0()); }
	ruleWHEN
	{ after(grammarAccess.getConWhenAccess().getWHENParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConWhen__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConWhen__Group__1__Impl
	rule__ConWhen__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConWhen__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConWhenAccess().getPreTriggerParserRuleCall_1()); }
	rulePreTrigger
	{ after(grammarAccess.getConWhenAccess().getPreTriggerParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConWhen__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConWhen__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConWhen__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConWhenAccess().getCommaKeyword_2()); }
	(',')?
	{ after(grammarAccess.getConWhenAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConIf__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConIf__Group__0__Impl
	rule__ConIf__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConIf__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConIfAccess().getIFParserRuleCall_0()); }
	ruleIF
	{ after(grammarAccess.getConIfAccess().getIFParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConIf__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConIf__Group__1__Impl
	rule__ConIf__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConIf__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConIfAccess().getPreTriggerParserRuleCall_1()); }
	rulePreTrigger
	{ after(grammarAccess.getConIfAccess().getPreTriggerParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConIf__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConIf__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConIf__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConIfAccess().getCommaKeyword_2()); }
	(',')?
	{ after(grammarAccess.getConIfAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConWhile__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConWhile__Group__0__Impl
	rule__ConWhile__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConWhile__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConWhileAccess().getWHILEParserRuleCall_0()); }
	ruleWHILE
	{ after(grammarAccess.getConWhileAccess().getWHILEParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConWhile__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConWhile__Group__1__Impl
	rule__ConWhile__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConWhile__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConWhileAccess().getStateParserRuleCall_1()); }
	ruleState
	{ after(grammarAccess.getConWhileAccess().getStateParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConWhile__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConWhile__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConWhile__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConWhileAccess().getCommaKeyword_2()); }
	(',')?
	{ after(grammarAccess.getConWhileAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConWhere__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConWhere__Group__0__Impl
	rule__ConWhere__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConWhere__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConWhereAccess().getWHEREParserRuleCall_0()); }
	ruleWHERE
	{ after(grammarAccess.getConWhereAccess().getWHEREParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConWhere__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConWhere__Group__1__Impl
	rule__ConWhere__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConWhere__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConWhereAccess().getFeatureParserRuleCall_1()); }
	ruleFeature
	{ after(grammarAccess.getConWhereAccess().getFeatureParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConWhere__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConWhere__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConWhere__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConWhereAccess().getCommaKeyword_2()); }
	(',')?
	{ after(grammarAccess.getConWhereAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Response__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Response__Group__0__Impl
	rule__Response__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResponseAccess().getTheKeyword_0()); }
	('the')?
	{ after(grammarAccess.getResponseAccess().getTheKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Response__Group__1__Impl
	rule__Response__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResponseAccess().getSysNameParserRuleCall_1()); }
	ruleSysName
	{ after(grammarAccess.getResponseAccess().getSysNameParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Response__Group__2__Impl
	rule__Response__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResponseAccess().getShallKeyword_2()); }
	'shall'
	{ after(grammarAccess.getResponseAccess().getShallKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Response__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResponseAccess().getSysResParserRuleCall_3()); }
	ruleSysRes
	{ after(grammarAccess.getResponseAccess().getSysResParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__ReqsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getReqsReqDesParserRuleCall_0()); }
		ruleReqDes
		{ after(grammarAccess.getModelAccess().getReqsReqDesParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReqDes__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReqDesAccess().getNameConditionParserRuleCall_0_0()); }
		ruleCondition
		{ after(grammarAccess.getReqDesAccess().getNameConditionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
