/*
 * generated by Xtext 2.25.0
 */
grammar InternalReqTxt;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.ReqTxtGrammarAccess;

}

@parser::members {

 	private ReqTxtGrammarAccess grammarAccess;

    public InternalReqTxtParser(TokenStream input, ReqTxtGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected ReqTxtGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getReqsReqDesParserRuleCall_0());
			}
			lv_reqs_0_0=ruleReqDes
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"reqs",
					lv_reqs_0_0,
					"org.xtext.ReqTxt.ReqDes");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleReqDes
entryRuleReqDes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReqDesRule()); }
	iv_ruleReqDes=ruleReqDes
	{ $current=$iv_ruleReqDes.current; }
	EOF;

// Rule ReqDes
ruleReqDes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getReqDesAccess().getNameConditionParserRuleCall_0_0());
				}
				lv_name_0_0=ruleCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReqDesRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"org.xtext.ReqTxt.Condition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getReqDesAccess().getResponseParserRuleCall_1());
		}
		ruleResponse
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_2='.'
		{
			newLeafNode(otherlv_2, grammarAccess.getReqDesAccess().getFullStopKeyword_2());
		}
	)
;

// Entry rule entryRuleCondition
entryRuleCondition returns [String current=null]:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	iv_ruleCondition=ruleCondition
	{ $current=$iv_ruleCondition.current.getText(); }
	EOF;

// Rule Condition
ruleCondition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConditionAccess().getConWhenParserRuleCall_0());
		}
		this_ConWhen_0=ruleConWhen
		{
			$current.merge(this_ConWhen_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConditionAccess().getConWhileParserRuleCall_1());
		}
		this_ConWhile_1=ruleConWhile
		{
			$current.merge(this_ConWhile_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConditionAccess().getConWhereParserRuleCall_2());
		}
		this_ConWhere_2=ruleConWhere
		{
			$current.merge(this_ConWhere_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConditionAccess().getConIfParserRuleCall_3());
		}
		this_ConIf_3=ruleConIf
		{
			$current.merge(this_ConIf_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)*
;

// Entry rule entryRuleConWhen
entryRuleConWhen returns [String current=null]:
	{ newCompositeNode(grammarAccess.getConWhenRule()); }
	iv_ruleConWhen=ruleConWhen
	{ $current=$iv_ruleConWhen.current.getText(); }
	EOF;

// Rule ConWhen
ruleConWhen returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConWhenAccess().getWHENParserRuleCall_0());
		}
		this_WHEN_0=ruleWHEN
		{
			$current.merge(this_WHEN_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getConWhenAccess().getPreTriggerParserRuleCall_1());
		}
		this_PreTrigger_1=rulePreTrigger
		{
			$current.merge(this_PreTrigger_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getConWhenAccess().getCommaKeyword_2());
			}
		)?
	)
;

// Entry rule entryRuleConIf
entryRuleConIf returns [String current=null]:
	{ newCompositeNode(grammarAccess.getConIfRule()); }
	iv_ruleConIf=ruleConIf
	{ $current=$iv_ruleConIf.current.getText(); }
	EOF;

// Rule ConIf
ruleConIf returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConIfAccess().getIFParserRuleCall_0());
		}
		this_IF_0=ruleIF
		{
			$current.merge(this_IF_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getConIfAccess().getPreTriggerParserRuleCall_1());
		}
		this_PreTrigger_1=rulePreTrigger
		{
			$current.merge(this_PreTrigger_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getConIfAccess().getCommaKeyword_2());
			}
		)?
	)
;

// Entry rule entryRuleConWhile
entryRuleConWhile returns [String current=null]:
	{ newCompositeNode(grammarAccess.getConWhileRule()); }
	iv_ruleConWhile=ruleConWhile
	{ $current=$iv_ruleConWhile.current.getText(); }
	EOF;

// Rule ConWhile
ruleConWhile returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConWhileAccess().getWHILEParserRuleCall_0());
		}
		this_WHILE_0=ruleWHILE
		{
			$current.merge(this_WHILE_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getConWhileAccess().getStateParserRuleCall_1());
		}
		this_State_1=ruleState
		{
			$current.merge(this_State_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getConWhileAccess().getCommaKeyword_2());
			}
		)?
	)
;

// Entry rule entryRuleConWhere
entryRuleConWhere returns [String current=null]:
	{ newCompositeNode(grammarAccess.getConWhereRule()); }
	iv_ruleConWhere=ruleConWhere
	{ $current=$iv_ruleConWhere.current.getText(); }
	EOF;

// Rule ConWhere
ruleConWhere returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConWhereAccess().getWHEREParserRuleCall_0());
		}
		this_WHERE_0=ruleWHERE
		{
			$current.merge(this_WHERE_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getConWhereAccess().getFeatureParserRuleCall_1());
		}
		this_Feature_1=ruleFeature
		{
			$current.merge(this_Feature_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getConWhereAccess().getCommaKeyword_2());
			}
		)?
	)
;

// Entry rule entryRuleResponse
entryRuleResponse returns [String current=null]:
	{ newCompositeNode(grammarAccess.getResponseRule()); }
	iv_ruleResponse=ruleResponse
	{ $current=$iv_ruleResponse.current.getText(); }
	EOF;

// Rule Response
ruleResponse returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='the'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getResponseAccess().getTheKeyword_0());
			}
		)?
		{
			newCompositeNode(grammarAccess.getResponseAccess().getSysNameParserRuleCall_1());
		}
		this_SysName_1=ruleSysName
		{
			$current.merge(this_SysName_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='shall'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getResponseAccess().getShallKeyword_2());
		}
		{
			newCompositeNode(grammarAccess.getResponseAccess().getSysResParserRuleCall_3());
		}
		this_SysRes_3=ruleSysRes
		{
			$current.merge(this_SysRes_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePreTrigger
entryRulePreTrigger returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPreTriggerRule()); }
	iv_rulePreTrigger=rulePreTrigger
	{ $current=$iv_rulePreTrigger.current.getText(); }
	EOF;

// Rule PreTrigger
rulePreTrigger returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getPreTriggerAccess().getOTHERParserRuleCall());
	}
	this_OTHER_0=ruleOTHER
	{
		$current.merge(this_OTHER_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleState
entryRuleState returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStateRule()); }
	iv_ruleState=ruleState
	{ $current=$iv_ruleState.current.getText(); }
	EOF;

// Rule State
ruleState returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getStateAccess().getOTHERParserRuleCall());
	}
	this_OTHER_0=ruleOTHER
	{
		$current.merge(this_OTHER_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleFeature
entryRuleFeature returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFeatureRule()); }
	iv_ruleFeature=ruleFeature
	{ $current=$iv_ruleFeature.current.getText(); }
	EOF;

// Rule Feature
ruleFeature returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getFeatureAccess().getOTHERParserRuleCall());
	}
	this_OTHER_0=ruleOTHER
	{
		$current.merge(this_OTHER_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleSysName
entryRuleSysName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSysNameRule()); }
	iv_ruleSysName=ruleSysName
	{ $current=$iv_ruleSysName.current.getText(); }
	EOF;

// Rule SysName
ruleSysName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getSysNameAccess().getOTHERParserRuleCall());
	}
	this_OTHER_0=ruleOTHER
	{
		$current.merge(this_OTHER_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleSysRes
entryRuleSysRes returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSysResRule()); }
	iv_ruleSysRes=ruleSysRes
	{ $current=$iv_ruleSysRes.current.getText(); }
	EOF;

// Rule SysRes
ruleSysRes returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getSysResAccess().getOTHERParserRuleCall());
	}
	this_OTHER_0=ruleOTHER
	{
		$current.merge(this_OTHER_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleWHEN
entryRuleWHEN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getWHENRule()); }
	iv_ruleWHEN=ruleWHEN
	{ $current=$iv_ruleWHEN.current.getText(); }
	EOF;

// Rule WHEN
ruleWHEN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='When'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getWHENAccess().getWhenKeyword_0());
		}
		    |
		kw='when'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getWHENAccess().getWhenKeyword_1());
		}
	)
;

// Entry rule entryRuleWHERE
entryRuleWHERE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getWHERERule()); }
	iv_ruleWHERE=ruleWHERE
	{ $current=$iv_ruleWHERE.current.getText(); }
	EOF;

// Rule WHERE
ruleWHERE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Where'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getWHEREAccess().getWhereKeyword_0());
		}
		    |
		kw='where'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getWHEREAccess().getWhereKeyword_1());
		}
	)
;

// Entry rule entryRuleIF
entryRuleIF returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIFRule()); }
	iv_ruleIF=ruleIF
	{ $current=$iv_ruleIF.current.getText(); }
	EOF;

// Rule IF
ruleIF returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='If'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIFAccess().getIfKeyword_0());
		}
		    |
		kw='if'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIFAccess().getIfKeyword_1());
		}
	)
;

// Entry rule entryRuleWHILE
entryRuleWHILE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getWHILERule()); }
	iv_ruleWHILE=ruleWHILE
	{ $current=$iv_ruleWHILE.current.getText(); }
	EOF;

// Rule WHILE
ruleWHILE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='While'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getWHILEAccess().getWhileKeyword_0());
		}
		    |
		kw='while'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getWHILEAccess().getWhileKeyword_1());
		}
	)
;

// Entry rule entryRuleOTHER
entryRuleOTHER returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOTHERRule()); }
	iv_ruleOTHER=ruleOTHER
	{ $current=$iv_ruleOTHER.current.getText(); }
	EOF;

// Rule OTHER
ruleOTHER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getOTHERAccess().getIDTerminalRuleCall());
		}
	)+
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
