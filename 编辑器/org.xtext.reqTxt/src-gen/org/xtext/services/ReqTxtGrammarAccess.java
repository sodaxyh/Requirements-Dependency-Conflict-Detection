/*
 * generated by Xtext 2.25.0
 */
package org.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ReqTxtGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ReqTxt.Model");
		private final Assignment cReqsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cReqsReqDesParserRuleCall_0 = (RuleCall)cReqsAssignment.eContents().get(0);
		
		//Model:
		//   reqs+=ReqDes*;
		@Override public ParserRule getRule() { return rule; }
		
		//reqs+=ReqDes*
		public Assignment getReqsAssignment() { return cReqsAssignment; }
		
		//ReqDes
		public RuleCall getReqsReqDesParserRuleCall_0() { return cReqsReqDesParserRuleCall_0; }
	}
	public class ReqDesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ReqTxt.ReqDes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameConditionParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cResponseParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ReqDes:
		//   name=Condition Response '.';
		@Override public ParserRule getRule() { return rule; }
		
		//name=Condition Response '.'
		public Group getGroup() { return cGroup; }
		
		//name=Condition
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//Condition
		public RuleCall getNameConditionParserRuleCall_0_0() { return cNameConditionParserRuleCall_0_0; }
		
		//Response
		public RuleCall getResponseParserRuleCall_1() { return cResponseParserRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ReqTxt.Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConWhenParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConWhileParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConWhereParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConIfParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		////<optional preconditions><optional trigger>
		//Condition:
		//   (ConWhen | ConWhile | ConWhere | ConIf)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(ConWhen | ConWhile | ConWhere | ConIf)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConWhen
		public RuleCall getConWhenParserRuleCall_0() { return cConWhenParserRuleCall_0; }
		
		//ConWhile
		public RuleCall getConWhileParserRuleCall_1() { return cConWhileParserRuleCall_1; }
		
		//ConWhere
		public RuleCall getConWhereParserRuleCall_2() { return cConWhereParserRuleCall_2; }
		
		//ConIf
		public RuleCall getConIfParserRuleCall_3() { return cConIfParserRuleCall_3; }
	}
	public class ConWhenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ReqTxt.ConWhen");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWHENParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPreTriggerParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ConWhen:
		//    WHEN PreTrigger (',')?;
		@Override public ParserRule getRule() { return rule; }
		
		//WHEN PreTrigger (',')?
		public Group getGroup() { return cGroup; }
		
		//WHEN
		public RuleCall getWHENParserRuleCall_0() { return cWHENParserRuleCall_0; }
		
		//PreTrigger
		public RuleCall getPreTriggerParserRuleCall_1() { return cPreTriggerParserRuleCall_1; }
		
		//(',')?
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
	}
	public class ConIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ReqTxt.ConIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIFParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPreTriggerParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ConIf:
		//    IF PreTrigger (',')?;
		@Override public ParserRule getRule() { return rule; }
		
		//IF PreTrigger (',')?
		public Group getGroup() { return cGroup; }
		
		//IF
		public RuleCall getIFParserRuleCall_0() { return cIFParserRuleCall_0; }
		
		//PreTrigger
		public RuleCall getPreTriggerParserRuleCall_1() { return cPreTriggerParserRuleCall_1; }
		
		//(',')?
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
	}
	public class ConWhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ReqTxt.ConWhile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWHILEParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cStateParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ConWhile:
		//    WHILE State (',')?;
		@Override public ParserRule getRule() { return rule; }
		
		//WHILE State (',')?
		public Group getGroup() { return cGroup; }
		
		//WHILE
		public RuleCall getWHILEParserRuleCall_0() { return cWHILEParserRuleCall_0; }
		
		//State
		public RuleCall getStateParserRuleCall_1() { return cStateParserRuleCall_1; }
		
		//(',')?
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
	}
	public class ConWhereElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ReqTxt.ConWhere");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWHEREParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cFeatureParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ConWhere:
		//    WHERE Feature (',')?;
		@Override public ParserRule getRule() { return rule; }
		
		//WHERE Feature (',')?
		public Group getGroup() { return cGroup; }
		
		//WHERE
		public RuleCall getWHEREParserRuleCall_0() { return cWHEREParserRuleCall_0; }
		
		//Feature
		public RuleCall getFeatureParserRuleCall_1() { return cFeatureParserRuleCall_1; }
		
		//(',')?
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
	}
	public class ResponseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ReqTxt.Response");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSysNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cShallKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cSysResParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		////the <system name> shall <system response>
		//Response:
		//   ('the')? SysName 'shall' SysRes;
		@Override public ParserRule getRule() { return rule; }
		
		//('the')? SysName 'shall' SysRes
		public Group getGroup() { return cGroup; }
		
		//('the')?
		public Keyword getTheKeyword_0() { return cTheKeyword_0; }
		
		//SysName
		public RuleCall getSysNameParserRuleCall_1() { return cSysNameParserRuleCall_1; }
		
		//'shall'
		public Keyword getShallKeyword_2() { return cShallKeyword_2; }
		
		//SysRes
		public RuleCall getSysResParserRuleCall_3() { return cSysResParserRuleCall_3; }
	}
	public class PreTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ReqTxt.PreTrigger");
		private final RuleCall cOTHERParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PreTrigger: OTHER;
		@Override public ParserRule getRule() { return rule; }
		
		//OTHER
		public RuleCall getOTHERParserRuleCall() { return cOTHERParserRuleCall; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ReqTxt.State");
		private final RuleCall cOTHERParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//State: OTHER;
		@Override public ParserRule getRule() { return rule; }
		
		//OTHER
		public RuleCall getOTHERParserRuleCall() { return cOTHERParserRuleCall; }
	}
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ReqTxt.Feature");
		private final RuleCall cOTHERParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Feature: OTHER;
		@Override public ParserRule getRule() { return rule; }
		
		//OTHER
		public RuleCall getOTHERParserRuleCall() { return cOTHERParserRuleCall; }
	}
	public class SysNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ReqTxt.SysName");
		private final RuleCall cOTHERParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SysName: OTHER;
		@Override public ParserRule getRule() { return rule; }
		
		//OTHER
		public RuleCall getOTHERParserRuleCall() { return cOTHERParserRuleCall; }
	}
	public class SysResElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ReqTxt.SysRes");
		private final RuleCall cOTHERParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SysRes: OTHER;
		@Override public ParserRule getRule() { return rule; }
		
		//OTHER
		public RuleCall getOTHERParserRuleCall() { return cOTHERParserRuleCall; }
	}
	public class KeywordsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ReqTxt.Keywords");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWHENParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWHEREParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIFParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWHILEParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		////关键词包括 when where if while
		//Keywords:
		//   WHEN | WHERE | IF | WHILE;
		@Override public ParserRule getRule() { return rule; }
		
		//WHEN | WHERE | IF | WHILE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WHEN
		public RuleCall getWHENParserRuleCall_0() { return cWHENParserRuleCall_0; }
		
		//WHERE
		public RuleCall getWHEREParserRuleCall_1() { return cWHEREParserRuleCall_1; }
		
		//IF
		public RuleCall getIFParserRuleCall_2() { return cIFParserRuleCall_2; }
		
		//WHILE
		public RuleCall getWHILEParserRuleCall_3() { return cWHILEParserRuleCall_3; }
	}
	public class WHENElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ReqTxt.WHEN");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cWhenKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cWhenKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//WHEN:
		//   'When' | 'when';
		@Override public ParserRule getRule() { return rule; }
		
		//'When' | 'when'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'When'
		public Keyword getWhenKeyword_0() { return cWhenKeyword_0; }
		
		//'when'
		public Keyword getWhenKeyword_1() { return cWhenKeyword_1; }
	}
	public class WHEREElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ReqTxt.WHERE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cWhereKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cWhereKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//WHERE:
		//   'Where' | 'where';
		@Override public ParserRule getRule() { return rule; }
		
		//'Where' | 'where'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Where'
		public Keyword getWhereKeyword_0() { return cWhereKeyword_0; }
		
		//'where'
		public Keyword getWhereKeyword_1() { return cWhereKeyword_1; }
	}
	public class IFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ReqTxt.IF");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//IF:
		//   'If' | 'if';
		@Override public ParserRule getRule() { return rule; }
		
		//'If' | 'if'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'If'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
	}
	public class WHILEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ReqTxt.WHILE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cWhileKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//WHILE:
		//   'While' | 'while';
		@Override public ParserRule getRule() { return rule; }
		
		//'While' | 'while'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'While'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//'while'
		public Keyword getWhileKeyword_1() { return cWhileKeyword_1; }
	}
	public class OTHERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ReqTxt.OTHER");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		////terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
		//OTHER:
		//   ID+;
		@Override public ParserRule getRule() { return rule; }
		
		//ID+
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	
	
	private final ModelElements pModel;
	private final ReqDesElements pReqDes;
	private final ConditionElements pCondition;
	private final ConWhenElements pConWhen;
	private final ConIfElements pConIf;
	private final ConWhileElements pConWhile;
	private final ConWhereElements pConWhere;
	private final ResponseElements pResponse;
	private final PreTriggerElements pPreTrigger;
	private final StateElements pState;
	private final FeatureElements pFeature;
	private final SysNameElements pSysName;
	private final SysResElements pSysRes;
	private final KeywordsElements pKeywords;
	private final WHENElements pWHEN;
	private final WHEREElements pWHERE;
	private final IFElements pIF;
	private final WHILEElements pWHILE;
	private final OTHERElements pOTHER;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ReqTxtGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pReqDes = new ReqDesElements();
		this.pCondition = new ConditionElements();
		this.pConWhen = new ConWhenElements();
		this.pConIf = new ConIfElements();
		this.pConWhile = new ConWhileElements();
		this.pConWhere = new ConWhereElements();
		this.pResponse = new ResponseElements();
		this.pPreTrigger = new PreTriggerElements();
		this.pState = new StateElements();
		this.pFeature = new FeatureElements();
		this.pSysName = new SysNameElements();
		this.pSysRes = new SysResElements();
		this.pKeywords = new KeywordsElements();
		this.pWHEN = new WHENElements();
		this.pWHERE = new WHEREElements();
		this.pIF = new IFElements();
		this.pWHILE = new WHILEElements();
		this.pOTHER = new OTHERElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.ReqTxt".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//   reqs+=ReqDes*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//ReqDes:
	//   name=Condition Response '.';
	public ReqDesElements getReqDesAccess() {
		return pReqDes;
	}
	
	public ParserRule getReqDesRule() {
		return getReqDesAccess().getRule();
	}
	
	////<optional preconditions><optional trigger>
	//Condition:
	//   (ConWhen | ConWhile | ConWhere | ConIf)*;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//ConWhen:
	//    WHEN PreTrigger (',')?;
	public ConWhenElements getConWhenAccess() {
		return pConWhen;
	}
	
	public ParserRule getConWhenRule() {
		return getConWhenAccess().getRule();
	}
	
	//ConIf:
	//    IF PreTrigger (',')?;
	public ConIfElements getConIfAccess() {
		return pConIf;
	}
	
	public ParserRule getConIfRule() {
		return getConIfAccess().getRule();
	}
	
	//ConWhile:
	//    WHILE State (',')?;
	public ConWhileElements getConWhileAccess() {
		return pConWhile;
	}
	
	public ParserRule getConWhileRule() {
		return getConWhileAccess().getRule();
	}
	
	//ConWhere:
	//    WHERE Feature (',')?;
	public ConWhereElements getConWhereAccess() {
		return pConWhere;
	}
	
	public ParserRule getConWhereRule() {
		return getConWhereAccess().getRule();
	}
	
	////the <system name> shall <system response>
	//Response:
	//   ('the')? SysName 'shall' SysRes;
	public ResponseElements getResponseAccess() {
		return pResponse;
	}
	
	public ParserRule getResponseRule() {
		return getResponseAccess().getRule();
	}
	
	//PreTrigger: OTHER;
	public PreTriggerElements getPreTriggerAccess() {
		return pPreTrigger;
	}
	
	public ParserRule getPreTriggerRule() {
		return getPreTriggerAccess().getRule();
	}
	
	//State: OTHER;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//Feature: OTHER;
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}
	
	//SysName: OTHER;
	public SysNameElements getSysNameAccess() {
		return pSysName;
	}
	
	public ParserRule getSysNameRule() {
		return getSysNameAccess().getRule();
	}
	
	//SysRes: OTHER;
	public SysResElements getSysResAccess() {
		return pSysRes;
	}
	
	public ParserRule getSysResRule() {
		return getSysResAccess().getRule();
	}
	
	////关键词包括 when where if while
	//Keywords:
	//   WHEN | WHERE | IF | WHILE;
	public KeywordsElements getKeywordsAccess() {
		return pKeywords;
	}
	
	public ParserRule getKeywordsRule() {
		return getKeywordsAccess().getRule();
	}
	
	//WHEN:
	//   'When' | 'when';
	public WHENElements getWHENAccess() {
		return pWHEN;
	}
	
	public ParserRule getWHENRule() {
		return getWHENAccess().getRule();
	}
	
	//WHERE:
	//   'Where' | 'where';
	public WHEREElements getWHEREAccess() {
		return pWHERE;
	}
	
	public ParserRule getWHERERule() {
		return getWHEREAccess().getRule();
	}
	
	//IF:
	//   'If' | 'if';
	public IFElements getIFAccess() {
		return pIF;
	}
	
	public ParserRule getIFRule() {
		return getIFAccess().getRule();
	}
	
	//WHILE:
	//   'While' | 'while';
	public WHILEElements getWHILEAccess() {
		return pWHILE;
	}
	
	public ParserRule getWHILERule() {
		return getWHILEAccess().getRule();
	}
	
	////terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	//OTHER:
	//   ID+;
	public OTHERElements getOTHERAccess() {
		return pOTHER;
	}
	
	public ParserRule getOTHERRule() {
		return getOTHERAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
